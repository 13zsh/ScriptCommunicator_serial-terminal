QFontComboBox::setEnabled(bool isEnabled):void \nEnables or disables the widget.
QFontComboBox::update(void):void \nUpdates the widget.
QFontComboBox::repaint(void):void \nRepaints the widget.
QFontComboBox::show(void):void \nShows the widget.
QFontComboBox::void close(void) \nCloses the widget.
QFontComboBox::hide(void):void \nHides the widget.
QFontComboBox::setWindowTitle(QString title)_void \nSets the window title.
QFontComboBox::windowPositionAndSize(void):QString \nReturns the window size and position (Pixel).The return string has following format:\n"top left x, top left y, width, height"
QFontComboBox::setWindowPositionAndSize(QString positionAndSize):void \nSets the position and the size of a window). String format:\n"top left x, top left y, width, height".
QFontComboBox::setBackgroundColor(QString color):void \nSets the background color of a script gui element. Possible colors are:\nblack, white, gray, red, green, blue, cyan, magenta and yellow.
QFontComboBox::setWindowTextColor(QString color):void \nSets the window text color of a script gui element. Possible colors are:\nblack, white, gray, red, green, blue, cyan, magenta and yellow.
QFontComboBox::setTextColor(QString color):void \nSets the text color of a script gui element. Possible colors are:\nblack, white, gray, red, green, blue, cyan, magenta and yellow.
QFontComboBox::setPaletteColor(QString palette, QString color):void \nSets a palette color of a script gui element.\nPossible palette values are: Base, Foreground, Background, WindowText, Window, Text and ButtonText.\nPossible colors are: black, white, gray, red, green, blue, cyan, magenta and yellow.
QFontComboBox::setPaletteColorRgb(quint8 red, quint8 green, quint8 blue, QString palette):void \nSets a palette color of a script gui element. Possible palette values are:\nBase, Foreground, Background, WindowText, Window, Text and ButtonText.
QFontComboBox::setToolTip(QString text, int duration):void \nSets the tool tip of the script gui element.\nIf the duration is -1 (default) the duration is calculated depending on the length of the tool tip.
QFontComboBox::isVisible(void):bool \nReturn true, if the widget is visible.
QFontComboBox::raise(void):void \nRaises this widget to the top of the parent widget's stack.
QFontComboBox::lower(void):void \nLowers the widget to the bottom of the parent widget's stack.
QFontComboBox::setWindowFlags(quint32 flags):void \nSets the window flags.\nNote: ScriptWidget::show must be called after a setWindowFlags call.
QFontComboBox::clearWindowFlags(quint32 flags):void \nClears the given window flags.\nNote: ScriptWidget::show must be called after a clearWindowFlags call.
QFontComboBox::windowFlags(void):quint32 \nReturns the window flags.
QFontComboBox::setFocus(void):void \nGives the keyboard input focus to this widget.
QFontComboBox::width(void):int \nReturns the width of the widget excluding any window frame.
QFontComboBox::height(void):int \nReturns the height of the widget excluding any window frame.
QFontComboBox::getWidgetPointer(void):QWidget* \nReturns the widget pointer.
QFontComboBox::setAdditionalData(int key, QString data):void \nSets/stores an additional data entry.
QFontComboBox::getAdditionalData(int key):QString \nReturns an additional data entry.
QFontComboBox::blockSignals(bool block):bool \nIf block is true, signals emitted by this object are blocked\n(i.e., emitting a signal will not invoke anything connected to it).\nIf block is false, no such blocking will occur.\nThe return value is the previous value of the blocking state.
QFontComboBox::getClassName(void):QString \nReturns the class name of this object.
QFontComboBox::getPublicScriptElements(void):QString \nReturns a semicolon separated list with all public functions, signals and properties.
QFontComboBox::addItem(const QString text):void \nAdds one item to the combo box.
QFontComboBox::insertItem(int index, const QString text):void \nInserts one item into the combo box.
QFontComboBox::removeItem(int index):void \nRemoves one item from the combo box.
QFontComboBox::setEditable(bool editable):void \nSets the editable property of the combo box.\nIf the editable property is true, then the text of the selected item can be changed.
QFontComboBox::isEditable(void):bool \nReturns true if the combo box is editable.\nIf the editable property is true, then the text of the selected item can be changed.
QFontComboBox::currentIndex(void):int \nReturns the index of the current selected item.
QFontComboBox::currentText(void):QString \nReturns the text of the current selected item.
QFontComboBox::itemText(int index):QString \nReturns the item (identified by index) text.
QFontComboBox::setItemText(int index, const QString text):void \nSets the item (identified by index) text.
QFontComboBox::setCurrentText(const QString text):void \nSets the text of the current selected item.
QFontComboBox::setCurrentIndex(int index):void \nSets the index of the current selected item.
QFontComboBox::count(void):int \nReturns the number of items in the combo box.  
QFontComboBox::clear(void):void \nClears the combo box and removes all items.
QFontComboBox::currentTextChangedSignal.connect(QString newText) \nThis signal is emitted if the text of the current selected item has been changed\n(new index or the text has been modified).
QFontComboBox::currentIndexChangedSignal.connect(int currentSelectedIndex) \nThis signal is emitted if the current selected index has been changed.